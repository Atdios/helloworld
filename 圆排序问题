#include<stdlib.h>
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstdio>
using namespace std;
int n, m;
const int maxn=1010;
double r[maxn],l[maxn],a[maxn];
double minn = 1000010.0;

double lens(int c){
	double len=0,t;
	for(int i=1;i<c;i++)
    {
		t=l[i]+2*sqrt((r[c]*r[i]));
		if(t>len)
        {
            len=t;
		}
	}
	return len;
}

void cal(){//计算当前圆排列的长度
	double L=0,R=0;
	for(int i=1;i<=n;i++)
    {
		if(l[i]-r[i]<L)
		{
            L=l[i]-r[i];
		}
		if(l[i]+r[i]>R)
		{
            R=l[i]+r[i];
		}
	}
	if((R-L)<=minn)
    {
		minn=R-L;//如果满足更小的，则更新
		for(int i =1;i<=n;i++)
		{
            a[i]=r[i];
		}
	}
}

void dfs(int c){
	if(c==n+1)//最后一个圆已经调整完毕
    {
		cal();//计算当前圆排列长度
    }
	else
	{
		for (int i=c; i<=n;i++)
        {
			swap(r[c],r[i]);
			double x=lens(c);//得到圆c的圆心横坐标
			if (r[1]+x+r[c]<minn)
			{
				l[c]=x;
				dfs(c+1);
			}
			swap(r[c], r[i]);
		}
	}
}
int main(){

    scanf("%d",&n);
	for(int i=1;i<=n;i++)
        scanf("%lf",&r[i]);
	dfs(1);

	printf("长度:%f\n排序:\n",minn);
	for(int i=1;i<= n;i++){
	printf("%.f ",a[i]);
	}
	return 0;
}
